#!/usr/bin/env bash

# Easier navigation: .., ..., ...., ....., ~ and -
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ~="cd ~" # `cd` is probably faster to type though
alias -- -="cd -"

# Shortcuts
alias d="cd ~/Documents/Dropbox"
alias dl="cd ~/Downloads"
alias dt="cd ~/Desktop"
alias p="cd ~/projects"
alias g="git"
alias deactivate="source deactivate"
alias dotfiles="atom ~/dotfiles"

# Detect which `ls` flavor is in use
if ls --color > /dev/null 2>&1; then # GNU `ls`
	colorflag="--color"
	export LS_COLORS='no=00:fi=00:di=01;31:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'
else # macOS `ls`
	colorflag="-G"
	export LSCOLORS='BxBxhxDxfxhxhxhxhxcxcx'
fi

# List all files colorized in long format
alias l="ls -lF ${colorflag}"

# List all files colorized in long format, including dot files
alias la="ls -laF ${colorflag}"

# List only directories
alias lsd="ls -lF ${colorflag} | grep --color=never '^d'"

# Always use color output for `ls`
alias ls="command ls ${colorflag}"

# Always enable colored `grep` output
# Note: `GREP_OPTIONS="--color=auto"` is deprecated, hence the alias usage.
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# Enable aliases to be sudo’ed
alias sudo='sudo '

# Get week number
alias week='date +%V'

# Get macOS Software Updates, and update installed Ruby gems, Homebrew, npm, and their installed packages
alias update='sudo softwareupdate -i -a; brew update; brew upgrade; brew cleanup; npm install npm -g; npm update -g; sudo gem update --system; sudo gem update; sudo gem cleanup'

# Google Chrome
alias chrome='/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome'
alias canary='/Applications/Google\ Chrome\ Canary.app/Contents/MacOS/Google\ Chrome\ Canary'

# IP addresses
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="ipconfig getifaddr en0"
alias ips="ifconfig -a | grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"

# Show active network interfaces
alias ifactive="ifconfig | pcregrep -M -o '^[^\t:]+:([^\n]|\n\t)*status: active'"

# Flush Directory Service cache
alias flush="dscacheutil -flushcache && killall -HUP mDNSResponder"

# Clean up LaunchServices to remove duplicates in the “Open With” menu
alias lscleanup="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user && killall Finder"

# Canonical hex dump; some systems have this symlinked
command -v hd > /dev/null || alias hd="hexdump -C"

# macOS has no `md5sum`, so use `md5` as a fallback
command -v md5sum > /dev/null || alias md5sum="md5"

# macOS has no `sha1sum`, so use `shasum` as a fallback
command -v sha1sum > /dev/null || alias sha1sum="shasum"

# JavaScriptCore REPL
jscbin="/System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc";
[ -e "${jscbin}" ] && alias jsc="${jscbin}";
unset jscbin;

alias fs="du -hs "

alias ccat="pygmentize -g"

alias kj="killjobs"
killjobs(){
  kill $(jobs | awk '{b=substr($1,2,1); c="%"; print c b}')
}

# This is just for testing the above command
# startjobs(){
#     COUNTER=0
#     until [ $COUNTER == 10 ]; do
#         sleep 2000 &
#         let COUNTER+=1
#     done
#     kill %2
#     kill %4
# }

zeppelin(){
  "$(brew --prefix apache-zeppelin)/bin/zeppelin-daemon.sh" "$@"
}

# Trim new lines and copy to clipboard
alias c="tr -d '\n' | pbcopy"

# Recursively delete `.DS_Store` files
alias cleanup="find . -type f -name '*.DS_Store' -ls -delete"

# Empty the Trash on all mounted volumes and the main HDD.
# Also, clear Apple’s System Logs to improve shell startup speed.
# Finally, clear download history from quarantine. https://mths.be/bum
emptytrash() {
  sudo rm -rfv /Volumes/*/.Trashes
  sudo rm -rfv ~/.Trash
  sudo rm -rfv /private/var/log/asl/*.asl
  sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* 'delete from LSQuarantineEvent'
}

# Show/hide hidden files in Finder
alias show="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
alias hide="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"

# Hide/show all desktop icons (useful when presenting)
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"

# URL-encode strings
alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1]);"'

# Merge PDF files
# Usage: `mergepdf -o output.pdf input{1,2,3}.pdf`
alias mergepdf='/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py'

# PlistBuddy alias, because sometimes `defaults` just doesn’t cut it
alias plistbuddy="/usr/libexec/PlistBuddy"

# Airport CLI alias
alias airport='/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport'

# Intuitive map function
# For example, to list all directories that contain a certain file:
# find . -name .gitattributes | map dirname
alias map="xargs -n1"

# One of @janmoesen’s ProTip™s
for method in GET HEAD POST PUT DELETE TRACE OPTIONS; do
	alias "${method}"="lwp-request -m '${method}'"
done

# Make Grunt print stack traces by default
command -v grunt > /dev/null && alias grunt="grunt --stack"

# Stuff I never really use but cannot delete either because of http://xkcd.com/530/
alias stfu="osascript -e 'set volume output muted true'"
alias pumpitup="osascript -e 'set volume output volume 100'"

# Kill all the tabs in Chrome to free up memory
# [C] explained: http://www.commandlinefu.com/commands/view/402/exclude-grep-from-your-grepped-output-of-ps-alias-included-in-description
alias chromekill="ps ux | grep '[C]hrome Helper --type=renderer' | grep -v extension-process | tr -s ' ' | cut -d ' ' -f2 | xargs kill"

# Lock the screen (when going AFK)
alias afk="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"

# Reload the shell (i.e. invoke as a login shell)
alias reload="exec ${SHELL} -l"

# Print each PATH entry on a separate line
alias path='echo -e ${PATH//:/\\n}'

extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)        tar xjf $1        ;;
      *.tar.gz)         tar xzf $1        ;;
      *.bz2)            bunzip2 $1        ;;
      *.rar)            unrar x $1        ;;
      *.gz)             gunzip $1         ;;
      *.tar)            tar xf $1         ;;
      *.tbz2)           tar xjf $1        ;;
      *.tgz)            tar xzf $1        ;;
      *.zip)            unzip $1          ;;
      *.Z)              uncompress $1     ;;
      *.7z)             7zr e $1          ;;
      *)                echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

whatsOnPort () {
  for port in "$@"
  do
    lsof -n -i:"$port" | grep LISTEN;
    sleep 1
  done
}

###########################
# Docker Helper Functions #
###########################

start-docker(){
  docker-machine start
  eval "$(docker-machine env)"
}

dbash() {
  docker exec -ti "$(did $1)" bash
}

did() {
  dpa | grep $1 | awk '{ print $1 }'
}

dpa() {
  docker ps -a
}

diclean() {
  docker rmi -f $(docker images --filter 'dangling=true' -q --no-trunc)
}

dstart() {
  echo "restarting $1"
  docker restart "$(did $1)" &> /dev/null;
  sleep 1;
  echo "$(dstatus $1)";
}

dstop() {
  docker stop "$(did $1)"
}

dstatus () {
  if [ $# -eq 0 ]; then
    docker ps -a --format 'table {{ .Names }}\t{{ .ID }}\t{{ .Status }}'
  else
    local mystatus="$(docker ps -a | grep $1 | awk '{$3=$4=$5=$6=$12=$13=""; print $0}')";
    local tempstatus="$(echo $mystatus | awk '{print $3}')";
    local is_open=0;
    echo "$mystatus"
    [[ "$tempstatus" == 'Up' ]] && local is_open=1;
    return "$is_open"
  fi
}

dclean() {
  docker rm -v $(docker ps -q -f status=exited)
}

dlogs() {
  dstatus "$1";
  local continue_when="$?";
  local when_count=0;
  if [[ "${@:2}" == "-f" ]]; then
    local last_start=$(date +%s)
    local attempt_num=0
    while [ $when_count -lt 7 ];do
      if [[ true || $* == *--since-restart* ]]; then
        docker logs "$(did $1)" "${@:2}" --since "$last_start";
      else
        docker logs "$(did $1)" "${@:2}";
      fi
      echo "***";
      echo "* Restarting in 5 seconds";
      echo "***";

      sleep 5;
      dstatus "$1";
      if [[ "$?" -ne "0" ]]; then
        when_count=0;
      else
        when_count="$when_count"+1;
      fi
    done

    echo "***";
    echo "* Exiting because $1 is down";
    echo "***";
  else
    docker logs "$(did $1)" "${@:2}"
  fi
}

dnuke() {
  docker rm `docker ps -aq --no-trunc --filter "status=exited"`
  docker rmi `docker images --filter 'dangling=true' -q --no-trunc`
  docker rm $(docker ps -a -q)
  docker rmi $(docker images -q)
}

####################
# fs Watch Helpers #
####################

declare -i last_called=0
declare -i throttle_by=5

@throttle() {
  local -i now=$(date +%s)
  if (($now - $last_called >= $throttle_by))
  then
    "$@"
  fi
  last_called=$(date +%s)
}


@debounce() {
  local pid=$$
  if [[ ! -f ~/.executing-$pid ]]
  then
    touch ~/.executing-$pid
    "$@"
    retVal="$?"
    {
      sleep "$throttle_by"
      if [[ -f ~/.on-finish-$pid ]]
      then
        "$@"
        rm -f ~/.on-finish-$pid
      fi
      rm -f ~/.executing-$pid
    } &
    return $retVal
  elif [[ ! -f ~/.on-finish-$pid ]]
  then
    touch ~/.on-finish-$pid
  fi
}

watch() {
  if [[ ! "$(which fswatch)" ]]; then
    echo please install fs watch with
    echo brew install fswatch
    exit 0
  fi
  local localpath="$1"; shift
  local rest="$*"
  echo watching "$localpath"
  fswatch -0 -o --event Updated "$localpath" | xargs -0 -I file zsh -c "@debounce eval $rest";
}

# AMP Specific stuff

watch-service() {
  if [ -d $AMP_SAFARI_PATH/$1 ]; then
    local olddir=$(pwd)
    echo 'Starting watcher on service:' $1
    watch $AMP_SAFARI_PATH/$1 dstart $1
  else
    echo $fg_bold[red] 'Safari:'$1 'Does not exist - skipping' $reset_color
  fi
}

prod-tunnels() {
  ssh -N -A -L 9042:10.0.41.196:9042 jeredmccullough@bastion.sandbox-amp.net
  ssh -N -L 9200:internal-PROD-elb-elasticsearch-463607781.us-west-2.elb.amazonaws.com:9200 jeredmccullough@bastion.sandbox-amp.net
}


es-sb() {
  ssh -N -L 9200:internal-sandbox-elb-es-02-240508465.us-west-2.elb.amazonaws.com:9200 jeredmccullough@bastion.sandbox-amp.net
}

es2-sb() {
  ssh -N -L 9300:internal-sandbox-elb-elasticsearch-2135334639.us-west-2.elb.amazonaws.com:9200 jeredmccullough@bastion-sandbox.sandbox-amp.net
}

cass-sb() {
  # ssh -N -A -L 9042:10.0.41.86:9042 jeredmccullough@bastion.sandbox-amp.net
  ssh -N -A -L 9042:10.0.43.6:9042 -o GatewayPorts=yes jeredmccullough@bastion.sandbox-amp.net
}

tunnel-status() {
  echo 'ElasticSearch'
  whatsOnPort 9200
  echo 'ElasticSearch 2'
  whatsOnPort 9300
  echo 'Cassandra'
  whatsOnPort 9042
}

spider-tunnels () {
  es-sb &
  es2-sb &
  cass-sb &
}

spider-status() {
  dstatus
  echo $fg[green] 'SSH Tunnels' $fg[reset]
  tunnel-status
}

spider () {
  case "$1" in
    status)
      spider-status
      ;;
    tunnels)
      spider-tunnels
      ;;
    watch)
      watch-service $2
      ;;
    *)
      if [ ! -z $1 ]; then
        local oldpwd=$(pwd)
        echo 'Changing directories'
        cd $AMP_SAFARI_PATH/spider
        ./spider "$@"
        cd ${oldpwd}
      else
        echo 'What do you want to do?'
      fi
  esac
}

#########################
# CANIS MAJORIS ALIASES #
#########################

canis () {
  if [ ! -z $1 ]; then
    local oldpwd=$(pwd)
    echo 'Changing directories'
    cd $AMP_CANIS_PATH
    npm run $1
    cd ${oldpwd}
  else
    echo 'What do you want to do?'
  fi
}

run_safari_tests(){
	nosetests --with-coverage --cover-tests --cover-branches --cover-erase --cover-package=app -v tests
}
